##########################################
Create the Dockerfile
##########################################
FROM python:2.7
ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt
ADD . /code/

##########################################
Create the docker-compose.yml
##########################################
version: '2'
services:
   db:
     image: postgres
     ports:
       - "5432:5432"
   web:
     build: .
     command: python manage.py runserver 0.0.0.0:8000
     volumes:
       - .:/code
     ports:
       - "8000:8000"
     depends_on:
       - db


###########################################
Create the requirements.txt
###########################################
Django
djangorestframework
django-cors-headers
djangorestframework-jsonapi==2.0.0-beta.2
psycopg2
httpie
coreapi
coreapi-cli

############################################
Start the new project
############################################
docker-compose run web django-admin.py startproject <project_name> .

############################################
Create the app within the porject
############################################
docker-compose run web python manage.py startapp <app_name>

######################################################
Add the database config to <project_name>/settings.py
######################################################
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'HOST': 'db',
        'PORT': 5432,
    }
}

#######################################################
Add to the INSTALLED_APPS in settings.py
#######################################################
'corsheaders',
'rest_framework',
'rest_framework.authtoken',
'rest_framework_json_api',
'app.apps.AppConfig'

#######################################################
Add to the MIDDLEWARE in settings.py
#######################################################
'django.contrib.sessions.middleware.SessionMiddleware',
'corsheaders.middleware.CorsMiddleware',
'django.middleware.common.CommonMiddleware',

(the first and last will exist, just need to add 'corsheaders.middleware.CorsMiddleware'

############################################
Add a CORS_ORIGIN rule
############################################
for development you can just add:
CORS_ORIGIN_ALLOW_ALL = True

##############################################
Add the REST_FRAMEWORK settings to settings.py
##############################################
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework_json_api.pagination.PageNumberPagination',
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework_json_api.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework_json_api.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
}

#################################################
Create your models but be sure to add JSONAPIMeta
#################################################
from __future__ import unicode_literals
from django.db import models


class TodoItem(models.Model):
    label = models.CharField(max_length=512)
    text = models.TextField(null=True)
    done = models.BooleanField(default=False)

    class JSONAPIMeta:
        resource_name = "todos"

#################################################
Create a serializer for the model
#################################################
from rest_framework import serializers
from models import TodoItem


class TodoItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = TodoItem
        fields = ('label', 'text', 'done')

#################################################
Create a view for the endpoint
#################################################
from rest_framework import viewsets
from models import TodoItem
from serializers import TodoItemSerializer


class TodoItemViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows TodoItems to be CRUDed.
    """
    queryset = TodoItem.objects.all()
    serializer_class = TodoItemSerializer

############################################
Register the viewsets in <app_name>/urls.py
############################################
from django.conf.urls import url, include
from app import views
from rest_framework.routers import DefaultRouter
from rest_framework.schemas import get_schema_view

schema_view = get_schema_view(title='Pastebin API')

router = DefaultRouter(trailing_slash=False)
router.register(r'todos', views.TodoItemViewSet)


# The API URLs are now determined automatically by the router
# Additionally, we include the login URLs for the browsable API.
urlpatterns = [
    url('^schema/$', schema_view),
    url(r'^', include(router.urls)),
    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
]

#################################################
Register the app urls in <project_name>/urls.py
#################################################
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^', include('app.urls')),
]

urlpatterns += [
    url(r'^api-path/', include('rest_framework.urls',
                               namespace='rest_framework')),
]

#####################################################
set up the token endpoint in <project_name>/urls.py
#####################################################
from rest_framework.authtoken.views import obtain_auth_token

(add this to the urlpatterns list
url(r'^api-auth-token/', obtain_auth_token),

###########################################################################################
Create an initial migration and migrate (this will be done any time a new model is created)
###########################################################################################
python manage.py makemigrations snippets
python manage.py migrate

############################################
Create a superuser
############################################
python manage.py createsuperuser